#!/usr/bin/env python3
"""
Script para executar a migration dos snapshots de endere√ßo
"""

import logging
from sqlalchemy import text
from app.database.db_connection import engine

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def executar_migration():
    """Executa a migration para adicionar os campos de snapshot"""
    
    try:
        with engine.begin() as conn:
            logger.info("üîÑ Iniciando migration para snapshots de endere√ßo...")
            
            # 1. Verificar se a tabela existe
            check_table = text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'delivery' 
                    AND table_name = 'pedidos_dv'
                );
            """)
            
            table_exists = conn.execute(check_table).scalar()
            if not table_exists:
                logger.error("‚ùå Tabela delivery.pedidos_dv n√£o existe!")
                return False
            
            logger.info("‚úÖ Tabela delivery.pedidos_dv encontrada")
            
            # 2. Adicionar campo endereco_snapshot
            logger.info("üîÑ Adicionando campo endereco_snapshot...")
            conn.execute(text("""
                ALTER TABLE delivery.pedidos_dv 
                ADD COLUMN IF NOT EXISTS endereco_snapshot JSONB;
            """))
            
            # 3. Adicionar campo endereco_geo
            logger.info("üîÑ Adicionando campo endereco_geo...")
            conn.execute(text("""
                ALTER TABLE delivery.pedidos_dv 
                ADD COLUMN IF NOT EXISTS endereco_geo GEOGRAPHY(POINT, 4326);
            """))
            
            # 4. Atualizar registros existentes
            logger.info("üîÑ Atualizando registros existentes...")
            conn.execute(text("""
                UPDATE delivery.pedidos_dv 
                SET endereco_snapshot = '{}'::jsonb 
                WHERE endereco_snapshot IS NULL;
            """))
            
            # 5. Tornar endereco_snapshot obrigat√≥rio
            logger.info("üîÑ Configurando endereco_snapshot como obrigat√≥rio...")
            conn.execute(text("""
                ALTER TABLE delivery.pedidos_dv 
                ALTER COLUMN endereco_snapshot SET NOT NULL;
            """))
            
            # 6. Criar √≠ndices
            logger.info("üîÑ Criando √≠ndices...")
            
            # √çndice GIN
            try:
                conn.execute(text("""
                    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_pedidos_endereco_snapshot_gin 
                    ON delivery.pedidos_dv USING gin (endereco_snapshot);
                """))
                logger.info("‚úÖ √çndice GIN criado")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro ao criar √≠ndice GIN: {e}")
            
            # √çndice GiST
            try:
                conn.execute(text("""
                    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_pedidos_endereco_geo_gist 
                    ON delivery.pedidos_dv USING gist (endereco_geo);
                """))
                logger.info("‚úÖ √çndice GiST criado")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro ao criar √≠ndice GiST: {e}")
            
            logger.info("üéâ Migration conclu√≠da com sucesso!")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå Erro durante migration: {e}")
        return False

if __name__ == "__main__":
    success = executar_migration()
    if success:
        print("‚úÖ Migration executada com sucesso!")
    else:
        print("‚ùå Migration falhou!")
        exit(1)
